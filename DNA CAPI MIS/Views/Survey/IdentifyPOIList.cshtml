@model IEnumerable<DNA_CAPI_MIS.Models.SurveyDataView>

@{
    ViewBag.Title = "Identify new POIs";
    Layout = "~/Views/Shared/_Layout_NoMenu.cshtml";
    bool firstRec = true;
    int lSid = 0;
    int sid = 1;
}

<link href="~/Content/Site.css" rel="stylesheet" />
<style type="text/css">
    .labeledMarker {
        font-size: 15px;
        font-weight: bold;
        color: #FFFFFF;
        font-family: 'DINNextRoundedLTProMediumRegular';
    }
</style>

<h4><strong>@ViewBag.Project.Name</strong></h4>
<h4>@ViewBag.Title</h4>

@if (ViewBag.ErrorMessage != null && ViewBag.ErrorMessage.Length > 0)
{
    <h4>@ViewBag.ErrorMessage</h4>
}
else
{
    @Styles.Render("~/Content/styles/jqwidgets")

    @section Scripts {
        @Scripts.Render("~/bundles/bootstrap/jqwidgets")

    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false&libraries=drawing&v=3.exp&language=ar"></script>
    <script type="text/javascript" src="~/Content/js/MarkerWithLabel.js"></script>

    <script type="text/javascript">
        var markers = [
        @foreach (var item in Model)
        {
            if (lSid != item.sbjnum) {
                lSid = item.sbjnum;
                if (!firstRec)
                {
                    WriteLiteral(",");
                }
                WriteLiteral("{title: \"" + Url.Encode(item.sbjnum.ToString()) + "\",");
                WriteLiteral("user: '" + item.SurveyorName + "',");
                WriteLiteral("lat: " + item.Latitude + ",");
                WriteLiteral("lng: " + item.Longitude + ",");
                WriteLiteral("ID: " + item.sbjnum + ",");
                WriteLiteral("Cat: \"" + item.sbjnum + "\",");
                WriteLiteral("sid: " + sid++ + "}");
                firstRec = false;
            }
        }
        ];

        var makersCatId = [];
        var markersCatName = [];

        var map;
        var placemarks = [];

        var polyLines = new Array();
        var surveydates = new Array();
        var polyLineFix = new Array();

        var showStartEndMarkers = true;
        var showTrackPointMarkers = false;

        var seMarkersArray = [];
        var pathPointArray = [];

        window.onload = function () {

            //Load Category data
            @*var catColors = new Object();
            @if (ViewBag.CategorySummary != null) {
                foreach (var cat in ViewBag.CategorySummary)
                {
                    var colorcode = "#" + cat.Color_Red.ToString("X") + cat.Color_Green.ToString("X") + cat.Color_Blue.ToString("X");
                    WriteLiteral("catColors[\"" + cat.ID + "\"] = \"" + colorcode + "\";");
                }
            }*@

            //Generate markers on the map
            //ddlFieldData();  // Removing this method call.
            $('#dvMap').height(window.innerHeight - 100);

            if (markers.length > 0) {
                var mapOptions = {
                    center: new google.maps.LatLng(markers[0].lat, markers[0].lng),
                    zoom: 15,
                    mapTypeControlOptions: {
                        mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, google.maps.MapTypeId.TERRAIN
                        , google.maps.MapTypeId.HYBRID]
                    },

                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                var infoWindow = new google.maps.InfoWindow();
                map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);

                //...

                for (i = 0; i < markers.length; i++) {
                    var data = markers[i];
                    data.title = decodeURIComponent(data.title).replace(/\+/g, " ");
                    var myLatlng = new google.maps.LatLng(data.lat, data.lng);

                    var path;
                    //var colour = catColors[data.ID];

                    if (data.Cat.length > 0 && data.ID > 0) {
                        var marker = createMarker(i + 1, map, myLatlng);

                        placemarks[i] = marker;
                        makersCatId[i] = data.ID;
                        markersCatName[i] = data.Cat;
                    }
                }

                var blistener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
                    ShowMarkersInCurrentBound();
                });
            }
        }

        function ShowMarkersInCurrentBound() {
            
            for (var r = 0; r < dataGrid.length; r++) {
                dataGrid[r].Show = 0;
            }

            for (var i = 0; i < placemarks.length; i++) {
                if (map.getBounds().contains(placemarks[i].getPosition())) {
                    dataGrid[i].Show = 1;

                    //alert(markers[i].sid + ", " + (i + 1) + ", " + markers[i].ID);
                }
            }
            $('#jqxgrid').jqxGrid('updatebounddata');
            $("#jqxgrid").jqxGrid('clearfilters');
            var fg = initialPOIGridFilter();
            // add the filters.
            $("#jqxgrid").jqxGrid('addfilter', 'Show', fg);
            // apply the filters.
            $("#jqxgrid").jqxGrid('applyfilters');
        }

        function createMarker(number, currentMap, currentLatLng) {
            var lm = 3;
            if (number > 9 && number < 100) {
                lm = 6;
            } else if (number > 99) {
                lm = 9;
            }
            var marker = new MarkerWithLabel({
                position: currentLatLng,
                map: currentMap,
                icon: '/Images/TrackPoint.png',
                //shadow: '/img/sticker/bubble_shadow.png',
                //transparent: '/img/sticker/bubble_transparent.png',
                draggable: false,
                raiseOnDrag: false,
                labelContent: "" + number,
                labelAnchor: new google.maps.Point(lm, 26),
                labelClass: "labelledMarker", // the CSS class for the label
                labelInBackground: false
            });
            return marker;
        }
    </script>

    <script type="text/javascript">
        var projectId = "@ViewBag.Project.ID";

        var dataGrid = new Array();

        function PopulateData() {
            // prepare the data
            var data = new Array();
            var row = {};
            @{
            var currentSbjnum = 0;
            var headerPrinted = false;
            var firstRow = true;
            var id = 0;
            }
            @foreach (var item in Model)
            {
                if (currentSbjnum != item.sbjnum)
                {
                    if (!firstRow)
                    {
                        WriteLiteral("data[" + id++ + "] = row;\n");
                    }
                    firstRow = false;
                    currentSbjnum = item.sbjnum;
                    WriteLiteral("row = {};");
                    WriteLiteral("row['id'] = " + id + ";");
                    WriteLiteral("row['sno'] = " + (id+1) + ";");
                    WriteLiteral("row['Show'] = 1;");
                    WriteLiteral("row['sbjnum'] = " + item.sbjnum + ";");
                    WriteLiteral("row['Longitude'] = " + item.Longitude + ";");
                    WriteLiteral("row['Latitude'] = " + item.Latitude + ";");
                    WriteLiteral("row['SurveyorName'] = '" + item.SurveyorName + "';");
                    WriteLiteral("row['CITY_GPS'] = '" + item.CITY_GPS + "';");
                    WriteLiteral("row['DISTRICT_GPS'] = '" + item.DISTRICT_GPS + "';");
                    WriteLiteral("row['DISTRICT_AUDITOR'] = '" + item.DISTRICT_AUDITOR + "';");
                    WriteLiteral("row['BUILDING_NUMBER_AUDITOR'] = '" + item.BUILDING_NUMBER_AUDITOR + "';");
                    WriteLiteral("row['BUILDING_TYPE_DROPDOWN'] = '" + item.BUILDING_TYPE_DROPDOWN + "';");
                    WriteLiteral("row['STREET_NAME_GPS'] = '" + item.STREET_NAME_GPS + "';");
                    WriteLiteral("row['STREET_NAME_DROPDOWN'] = '" + Url.Encode(item.STREET_NAME_DROPDOWN) + "';");
                    WriteLiteral("row['STREET_NAME_AUDITOR'] = '" + Url.Encode(item.STREET_NAME_AUDITOR) + "';");
                    WriteLiteral("row['ZIPCODE_GPS'] = '" + item.ZIPCODE_GPS + "';");
                    WriteLiteral("row['ADDITIONAL_CODE_GPS'] = '" + item.ADDITIONAL_CODE_GPS + "';");
                    WriteLiteral("row['LANDMARK_GPS'] = '" + item.LANDMARK_GPS + "';");
                    WriteLiteral("row['LANDMARK_AUDITOR'] = '" + Url.Encode(item.LANDMARK_AUDITOR) + "';");
                    WriteLiteral("row['STC_SHEET_AUDITOR'] = '" + item.STC_SHEET_AUDITOR + "';");
                    WriteLiteral("row['MOBILY_SHEET_AUDITOR'] = '" + item.MOBILY_SHEET_AUDITOR + "';");
                }
                WriteLiteral("row['_" + item.FieldId + "'] = urldecode(\"" + Url.Encode(item.FieldValue) + "\");");
            }
            @if (!firstRow)
            {
                WriteLiteral("data[" + id++ + "] = row;\n");
            }

            return data;
        }

        $(document).ready(function () {
            // prepare the data
            dataGrid = PopulateData();

            var source =
            {
                localdata: dataGrid,
                datafields:
                [
                @if (Model.Count() > 0)
                {
                    currentSbjnum = ViewBag.DefaultSurveyId;
                }
                @{headerPrinted = false;}
                @foreach (var item in Model)
                {
                    if (currentSbjnum == item.sbjnum)
                    { 
                        if (!headerPrinted)
                        {
                            headerPrinted = true;
                            WriteLiteral("{ name: 'sno', type: 'number' },");
                            WriteLiteral("{ name: 'sbjnum', type: 'number' },");
                            WriteLiteral("{ name: 'Show', type: 'number' },");
                            WriteLiteral("{ name: 'SurveyorName', type: 'string' },");
                            WriteLiteral("{ name: 'Country', type: 'string' },");
                            WriteLiteral("{ name: 'City', type: 'string' },");
                            WriteLiteral("{ name: 'District', type: 'string' },");
                            WriteLiteral("{ name: 'CITY_GPS', type: 'string' },");
                            WriteLiteral("{ name: 'DISTRICT_GPS', type: 'string' },");
                            WriteLiteral("{ name: 'DISTRICT_AUDITOR', type: 'string' },");
                            WriteLiteral("{ name: 'BUILDING_NUMBER_AUDITOR', type: 'string' },");
                            WriteLiteral("{ name: 'BUILDING_TYPE_DROPDOWN', type: 'string' },");
                            WriteLiteral("{ name: 'STREET_NAME_GPS', type: 'string' },");
                            WriteLiteral("{ name: 'STREET_NAME_DROPDOWN', type: 'string' },");
                            WriteLiteral("{ name: 'STREET_NAME_AUDITOR', type: 'string' },");
                            WriteLiteral("{ name: 'ZIPCODE_GPS', type: 'string' },");
                            WriteLiteral("{ name: 'ADDITIONAL_CODE_GPS', type: 'string' },");
                            WriteLiteral("{ name: 'LANDMARK_GPS', type: 'string' },");
                            WriteLiteral("{ name: 'LANDMARK_AUDITOR', type: 'string' },");
                            WriteLiteral("{ name: 'STC_SHEET_AUDITOR', type: 'string' },");
                            WriteLiteral("{ name: 'MOBILY_SHEET_AUDITOR', type: 'string' },");
                        }
                        WriteLiteral("{ name: '_" + item.FieldId + "', type: 'string' },");
                    }
                    else
                    {
                        if (headerPrinted)
                        {
                            break;
                        }
                    }
                }
                ],
                datatype: "array",
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            var toThemeProperty = function (className) {
                return className + " " + className + "-" + theme;
            }

            var groupsrenderer = function (text, group, expanded, data) {
            }

            var initialFilter = initialPOIGridFilter();

            // initialize jqxGrid
            $("#jqxgrid").jqxGrid(
            {
                theme: 'metro',
                editable: false,
                width: '100%',
                autoheight: true,
                source: dataAdapter,
                groupable: false,
                columnsresize: true,
                columnsreorder: true,
                //groupsrenderer: groupsrenderer,
                altrows: true,
                sortable: true,
                filterable: true,
                filtermode: 'excel',
                showfilterrow: false,
                columns: [
                @{headerPrinted = false;}
                @foreach (var item in Model)
                {
                    if (currentSbjnum == item.sbjnum)
                    {
                        if (!headerPrinted)
                        {
                            headerPrinted = true;

                            WriteLiteral("{ text: 'Serial', groupable: false, editable: false, datafield: 'sno', type: 'number', width: 40 },");
                            WriteLiteral("{ text: 'Show', filter: initialFilter, hidden: true, groupable: false, editable: false, datafield: 'Show', type: 'number', width: 40 },");
                            WriteLiteral("{ text: 'Survey Id', groupable: false, editable: false, datafield: 'sbjnum', type: 'number', width: 80 },");
                            WriteLiteral("{ text: 'Surveyor Name', groupable: true, editable: false, datafield: 'SurveyorName', type: 'string', width: 80 },");
                            WriteLiteral("{ text: 'City', groupable: true, editable: false, datafield: 'City', type: 'string', width: 150 },");
                            WriteLiteral("{ text: 'District', groupable: true, editable: false, datafield: 'District', type: 'string', width: 150 },");
                            if (ViewBag.Project.NeedBuildingSearch == true)
                            {
                                WriteLiteral("{ text: 'City (Device)', groupable: true, editable: false, datafield: 'CITY_GPS', type: 'string', width: 120 },");
                                WriteLiteral("{ text: 'District (Device)', groupable: true, editable: false, datafield: 'DISTRICT_GPS', type: 'string', width: 150 },");
                                WriteLiteral("{ text: 'District (Auditor)', groupable: true, editable: false, datafield: 'DISTRICT_AUDITOR', type: 'string', width: 150 },");
                                WriteLiteral("{ text: 'Building #', groupable: true, editable: false, datafield: 'BUILDING_NUMBER_AUDITOR', type: 'string', width: 150 },");
                                WriteLiteral("{ text: 'Building Type', groupable: true, editable: false, datafield: 'BUILDING_TYPE_DROPDOWN', type: 'number', width: 80 },");
                                WriteLiteral("{ text: 'Street Name (Device)', groupable: true, editable: false, datafield: 'STREET_NAME_GPS', type: 'number', width: 80 },");
                                WriteLiteral("{ text: 'Street Name (Locator)', groupable: true, editable: false, datafield: 'STREET_NAME_DROPDOWN', width: 80 },");
                                WriteLiteral("{ text: 'Street Name (Auditor)', groupable: true, editable: false, datafield: 'STREET_NAME_AUDITOR', type: 'string', width: 80 },");
                                WriteLiteral("{ text: 'Zip Code (Locator)', groupable: true, editable: false, datafield: 'ZIPCODE_GPS', type: 'string', width: 150 },");
                                WriteLiteral("{ text: 'Additional Code (Locator)', groupable: true, editable: false, datafield: 'ADDITIONAL_CODE_GPS', type: 'string', width: 150 },");
                                WriteLiteral("{ text: 'Landmark (Device)', groupable: true, editable: false, datafield: 'LANDMARK_GPS', type: 'string', width: 150 },");
                                WriteLiteral("{ text: 'Landmark (Auditor)', groupable: true, editable: false, datafield: 'LANDMARK_AUDITOR', type: 'number', width: 80 },");
                                WriteLiteral("{ text: 'STC Sheet', groupable: true, editable: false, datafield: 'STC_SHEET_AUDITOR', type: 'number', width: 80 },");
                                WriteLiteral("{ text: 'Mobily Sheet', groupable: true, editable: false, datafield: 'MOBILY_SHEET_AUDITOR', width: 80 },");
                            }
                        }
                        var reportTitle = "";
                        if (ViewBag.ReportTitleAs == "0")
                        {
                            reportTitle = Url.Encode(item.ReportTitle);
                        }
                        else if (ViewBag.ReportTitleAs == "1")
                        {
                            reportTitle = Url.Encode(item.Title);
                        }
                        else if (ViewBag.ReportTitleAs == "2")
                        {
                            reportTitle = Url.Encode(item.ReportTitle + "-" + item.Title);
                        }
                        WriteLiteral("{ text: urldecode('" + reportTitle + "'), groupable: true, editable: true, datafield: '_" + item.FieldId + "', type: 'string', width: 100 },");
                    }
                    else
                    {
                        if (headerPrinted)
                        {
                            break;
                        }
                    }
                }
                ]
            });

            $("#excelExport").click(function () {
                var exportInfo = $("#jqxgrid").jqxGrid('exportdata', 'xls');
                download("POIDataSheet_" + "@DateTime.Today.ToShortDateString().Replace("/", "")" + ".xls", exportInfo);
            });

        });

        function initialPOIGridFilter() {
            var filtergroup = new $.jqx.filter();
            var filter_or_operator = 1;
            var filtervalue = 1;
            var filtercondition = 'equal';
            var filter = filtergroup.createfilter('numericfilter', filtervalue, filtercondition);
            filtergroup.addfilter(filter_or_operator, filter);
            return filtergroup;
        }

        function download(filename, content) {
            contentType = 'application/octet-stream';
            var a = document.createElement('a');
            var blob = new Blob([content], { 'type': contentType });
            a.href = window.URL.createObjectURL(blob);
            a.download = filename;
            a.click();
        }


    </script>
}
<div class="row">
    <div id="dvMap" style="height: 100vh; float:left; width:100%;">
    </div>

    <div id='jqxWidget'>
        <div style="height:100%;" id="jqxgrid"></div>
    </div>
    <div class="form-group">
        <div style="float: left; margin-left: 20px; margin-top: 20px;">
            <input type="button" value="Export to Excel" id='excelExport' class="btn btn-default" />
        </div>
    </div>
</div>
}