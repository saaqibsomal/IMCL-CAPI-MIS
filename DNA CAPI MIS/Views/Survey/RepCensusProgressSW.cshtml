@model IEnumerable<DNA_CAPI_MIS.Models.RepCensusProgressSW>

@{
    ViewBag.Title = "Census Progress - Surveyor Districts wise";
    //var currentSbjnum = 0;
    //var headerPrinted = false;

    //if (Model.Count() > 0)
    //{
    //    currentSbjnum = Model.FirstOrDefault().sbjnum;
    //}

}
@section Scripts {
    <link class="ui-theme" rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/cupertino/jquery-ui.css">
    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

    <link rel="stylesheet" href="/Scripts/tablesorter/docs/css/jq.css">
    <link href="/Scripts/tablesorter/docs/css/prettify.css" rel="stylesheet">
    <script src="/Scripts/tablesorter/docs/js/prettify.js"></script>
    <script src="/Scripts/tablesorter/docs/js/docs.js"></script>

    <!-- Tablesorter: required -->
    <link rel="stylesheet" href="/Scripts/tablesorter/css/theme.blue.css">
    <script src="/Scripts/tablesorter/js/jquery.tablesorter.js"></script>
    <script src="/Scripts/tablesorter/js/jquery.tablesorter.widgets.js"></script>

    <!-- Tablesorter: optional -->
    <link rel="stylesheet" href="/Scripts/tablesorter/addons/pager/jquery.tablesorter.pager.css">
    <script src="/Scripts/tablesorter/addons/pager/jquery.tablesorter.pager.js"></script>

    <script id="js">
        $(document).ready(function () {

            // **********************************
            //  Description of ALL pager options
            // **********************************
            var pagerOptions = {

                // target the pager markup - see the HTML block below
                container: $(".pager"),

                // use this url format "http:/mydatabase.com?page={page}&size={size}&{sortList:col}"
                ajaxUrl: null,

                // modify the url after all processing has been applied
                customAjaxUrl: function (table, url) { return url; },

                // process ajax so that the data object is returned along with the total number of rows
                // example: { "data" : [{ "ID": 1, "Name": "Foo", "Last": "Bar" }], "total_rows" : 100 }
                ajaxProcessing: function (ajax) {
                    if (ajax && ajax.hasOwnProperty('data')) {
                        // return [ "data", "total_rows" ];
                        return [ajax.total_rows, ajax.data];
                    }
                },

                // output string - default is '{page}/{totalPages}'
                // possible variables: {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
                output: '{startRow} to {endRow} ({totalRows})',

                // apply disabled classname to the pager arrows when the rows at either extreme is visible - default is true
                updateArrows: true,

                // starting page of the pager (zero based index)
                page: 0,

                // Number of visible rows - default is 10
                size: 50,

                // Save pager page & size if the storage script is loaded (requires $.tablesorter.storage in jquery.tablesorter.widgets.js)
                savePages: true,

                //defines custom storage key
                storageKey: 'tablesorter-pager',

                // if true, the table will remain the same height no matter how many records are displayed. The space is made up by an empty
                // table row set to a height to compensate; default is false
                fixedHeight: true,

                // remove rows from the table to speed up the sort of large tables.
                // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
                removeRows: false,

                // css class names of pager arrows
                cssNext: '.next', // next page arrow
                cssPrev: '.prev', // previous page arrow
                cssFirst: '.first', // go to first page arrow
                cssLast: '.last', // go to last page arrow
                cssGoto: '.gotoPage', // select dropdown to allow choosing a page

                cssPageDisplay: '.pagedisplay', // location of where the "output" is displayed
                cssPageSize: '.pagesize', // page size selector - select dropdown that sets the "size" option

                // class added to arrows when at the extremes (i.e. prev/first arrows are "disabled" when on the first page)
                cssDisabled: 'disabled', // Note there is no period "." in front of this class name
                cssErrorRow: 'tablesorter-errorRow' // ajax error information row

            };

            // Initialize tablesorter
            // ***********************
            $('table')
                .tablesorter({
                    theme: 'blue',
                    widthFixed: true,
                    widgets: ['zebra', 'filter']
                })

                // bind to pager events
                // *********************
                .bind('pagerChange pagerComplete pagerInitialized pageMoved', function (e, c) {
                    var msg = '"</span> event triggered, ' + (e.type === 'pagerChange' ? 'going to' : 'now on') +
                        ' page <span class="typ">' + (c.page + 1) + '/' + c.totalPages + '</span>';
                    $('#display')
                        .append('<li><span class="str">"' + e.type + msg + '</li>')
                        .find('li:first').remove();
                })

                // initialize the pager plugin
                // ****************************
                .tablesorterPager(pagerOptions);

            // Disable / Enable
            // **************
            $('.toggle').click(function () {
                var mode = /Disable/.test($(this).text());
                $('table').trigger((mode ? 'disable' : 'enable') + '.pager');
                $(this).text((mode ? 'Enable' : 'Disable') + 'Pager');
                return false;
            });
            $('table').bind('pagerChange', function () {
                // pager automatically enables when table is sorted.
                $('.toggle').text('Disable Pager');
            });

        });
    </script>
}

<p>
    @Html.ActionLink("All Projects", "OpenProject", "Designer") |
    @Html.ActionLink("Project Overview", "ProjectOverview", "Designer", new { id = ViewBag.ProjectId }, null)
</p>
<h4><strong>@ViewBag.ProjectName</strong></h4>
<h4>@ViewBag.Title</h4>

<div style="overflow-x: scroll;">
    <table class="tablesorter">
        <thead>
        <tr>
            <th>
                Surveyor Name
            </th>
            <th>
                Total POI Count
            </th>
            <th>
                POI Cancelled by Field
            </th>
            <th>
                POI Cancelled by QC
            </th>
            <th>
                Total Valid POIs
            </th>
            <th>
                Assigned City
            </th>
            <th>
                Assigned District Id
            </th>
            <th>
                Assigned District(s)
            </th>
            <th>
                Total District Roads(km)
            </th>
            <th>
                Total Roads(km) Covered
            </th>
            <th>
                Remaining Roads(km)
            </th>
            <th>POIs on Map</th>
            <th>
                QC Data Sheet
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>@item.SurveyorName</td>
            <td align="right">@item.POICount</td>
            <td align="right">@item.OpCancelled</td>
            <td align="right">@item.QCCancelled</td>
            <td align="right">
            @{
            WriteLiteral(item.POICount - item.OpCancelled - item.QCCancelled);
            }
            </td>
            <td>@item.CityName</td>
            <td>@item.DistrictId</td>
            <td>@item.DistrictName</td>
            <td align="right">@Math.Round(Convert.ToDouble(item.DistanceMax), 2)</td>
            <td align="right">@Math.Round(Convert.ToDouble(item.DistanceMade), 2)</td>
            <td align="right">
            @{
            WriteLiteral(Math.Round(Convert.ToDouble(item.DistanceMax - item.DistanceMade), 2));
            }
            </td>
            <td></td>
            <td><a target="_blank" href="@{WriteLiteral(string.Format("/Survey/SurveyApproval/{0}/en?&surveyors=%27{1}%27&astatus=3&rt=0&fv=0&r=1&district={2}", ViewBag.ProjectId, item.SurveyorName, item.DistrictId));}">Data Sheet</a></td>
        </tr>
        }
    </tbody>
    </table>
</div>

<div class="pager">
    <img src="/Scripts/tablesorter/addons/pager/icons/first.png" class="first" alt="First" />
    <img src="/Scripts/tablesorter/addons/pager/icons/prev.png" class="prev" alt="Prev" />
    <span class="pagedisplay"></span> <!-- this can be any element, including an input -->
    <img src="/Scripts/tablesorter/addons/pager/icons/next.png" class="next" alt="Next" />
    <img src="/Scripts/tablesorter/addons/pager/icons/last.png" class="last" alt="Last" />
    <select class="pagesize" title="Select page size">
        <option value="10">10</option>
        <option value="20">20</option>
        <option value="30">30</option>
        <option value="40">40</option>
    </select>
    <select class="gotoPage" title="Select page number"></select>
</div>
